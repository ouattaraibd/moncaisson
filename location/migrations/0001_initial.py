# Generated by Django 5.2.1 on 2025-05-15 18:16

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MessagingPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_attachments_per_message', models.PositiveIntegerField(default=3)),
                ('message_edit_window', models.DurationField(default=datetime.timedelta(seconds=900))),
                ('allow_message_forwarding', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Politique de messagerie',
                'verbose_name_plural': 'Politiques de messagerie',
            },
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('version', models.CharField(max_length=20)),
                ('content', models.TextField()),
                ('policy_type', models.CharField(choices=[('GENERAL', 'Politique Générale'), ('LOUEUR', 'Politique Loueur'), ('PROPRIETAIRE', 'Politique Propriétaire')], max_length=20)),
                ('effective_date', models.DateField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Politique',
                'verbose_name_plural': 'Politiques',
                'ordering': ['-effective_date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('LOUEUR', 'Loueur'), ('PROPRIETAIRE', 'Propriétaire'), ('ADMIN', 'Administrateur')], default='LOUEUR', max_length=13, verbose_name="Type d'utilisateur")),
                ('verification_status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('documents_required', 'Documents requis')], default='documents_required', max_length=20, verbose_name='Statut de vérification')),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Format : +225XXXXXXXX ou 0XXXXXXXX', regex='^\\+?[0-9]{8,15}$')], verbose_name='Téléphone')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('country', models.CharField(default='CI', max_length=2, verbose_name='Pays')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Photo de profil')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Compte vérifié')),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('credit', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Crédit disponible (XOF)')),
                ('trust_score', models.PositiveSmallIntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de confiance')),
                ('trust_metrics', models.JSONField(default=dict, verbose_name='Métriques de confiance')),
                ('last_trust_update', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('parrain', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'LOUEUR'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Parrain')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
                'permissions': [('can_verify_users', 'Peut vérifier les utilisateurs'), ('can_manage_verifications', 'Peut gérer les vérifications')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('is_active', models.BooleanField(default=True, verbose_name='Conversation active')),
                ('subject', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sujet')),
                ('participants', models.ManyToManyField(related_name='location_conversations', to=settings.AUTH_USER_MODEL, verbose_name='Participants')),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ConversationArchive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'archivage")),
                ('archive_reason', models.CharField(blank=True, max_length=100, null=True, verbose_name="Raison de l'archivage")),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='location.conversation', verbose_name='Conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_archived_conversations', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Archive de conversation',
                'verbose_name_plural': 'Archives de conversations',
                'ordering': ['-archived_at'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name="Nom de l'option")),
                ('delivery_type', models.CharField(choices=[('STANDARD', 'Standard'), ('EXPRESS', 'Express'), ('PREMIUM', 'Premium'), ('WITH_DRIVER', 'Avec chauffeur')], default='STANDARD', max_length=20, verbose_name='Type de livraison')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prix (XOF)')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('available', models.BooleanField(default=True, verbose_name='Disponible')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
            ],
            options={
                'verbose_name': 'Option de livraison',
                'verbose_name_plural': 'Options de livraison',
                'ordering': ['price'],
                'constraints': [models.UniqueConstraint(fields=('name', 'delivery_type'), name='unique_delivery_option')],
            },
        ),
        migrations.CreateModel(
            name='DeliveryPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance_min', models.PositiveIntegerField()),
                ('distance_max', models.PositiveIntegerField()),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('price_per_km', models.DecimalField(decimal_places=2, max_digits=6)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='location.deliveryoption')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assurance', models.FileField(upload_to='documents/assurances/')),
                ('carte_grise', models.FileField(upload_to='documents/cartes_grise/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('en_attente', 'En attente'), ('approuve', 'Approuvé'), ('rejete', 'Rejeté')], default='en_attente', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('id_card', models.FileField(blank=True, null=True, upload_to='verifications/ids/')),
                ('vehicle_insurance', models.FileField(blank=True, null=True, upload_to='verifications/assurances/')),
                ('registration_card', models.FileField(blank=True, null=True, upload_to='verifications/cartegrise/')),
                ('driver_license', models.FileField(blank=True, null=True, upload_to='verifications/permis/')),
                ('passport', models.FileField(blank=True, null=True, upload_to='verifications/passeports/')),
                ('selfie', models.ImageField(blank=True, null=True, upload_to='verifications/selfies/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Vérification d'identité",
                'verbose_name_plural': "Vérifications d'identité",
            },
        ),
        migrations.CreateModel(
            name='LoueurProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro de passeport')),
                ('driving_license', models.CharField(blank=True, max_length=50, verbose_name='Permis de conduire')),
                ('license_expiry', models.DateField(blank=True, null=True, verbose_name="Date d'expiration du permis")),
                ('preferred_payment_method', models.CharField(choices=[('ORANGE', 'Orange Money'), ('WAVE', 'Wave'), ('PAYPAL', 'PayPal'), ('CARTE', 'Carte de crédit'), ('PORTEFEUILLE', 'Portefeuille virtuel'), ('STRIPE', 'Stripe'), ('MOBILE_MONEY', 'Mobile Money International')], default='ORANGE', max_length=20, verbose_name='Méthode de paiement préférée')),
                ('driving_experience', models.PositiveSmallIntegerField(default=1, verbose_name="Années d'expérience de conduite")),
                ('is_verified_driver', models.BooleanField(default=False, verbose_name='Conducteur vérifié')),
                ('preferred_vehicle_types', models.JSONField(default=list, verbose_name='Types de véhicules préférés')),
                ('insurance_number', models.CharField(blank=True, max_length=50, verbose_name="Numéro d'assurance")),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loueur_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Loueur',
                'verbose_name_plural': 'Profils Loueurs',
            },
        ),
        migrations.CreateModel(
            name='LoyaltyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField(default=0)),
                ('level', models.CharField(choices=[('BRONZE', 'Bronze (0-499 points)'), ('SILVER', 'Argent (500-1999 points)'), ('GOLD', 'Or (2000+ points)')], default='BRONZE', max_length=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('badges', models.JSONField(default=list)),
                ('special_badges', models.JSONField(default=list)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil de fidélité',
                'verbose_name_plural': 'Profils de fidélité',
                'ordering': ['-points'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=5000, verbose_name='Contenu')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name="Date d'envoi")),
                ('read', models.BooleanField(default=False, verbose_name='Lu')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_messages', to='location.conversation', verbose_name='Conversation')),
                ('deleted_for', models.ManyToManyField(blank=True, related_name='location_deleted_messages', to=settings.AUTH_USER_MODEL, verbose_name='Supprimé pour')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='Expéditeur')),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MessageAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='messaging/attachments/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png', 'doc', 'docx'])], verbose_name='Fichier')),
                ('file_type', models.CharField(blank=True, max_length=50, verbose_name='Type de fichier')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier (bytes)')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_attachments', to='location.message', verbose_name='Message')),
            ],
            options={
                'verbose_name': 'Pièce jointe',
                'verbose_name_plural': 'Pièces jointes',
            },
        ),
        migrations.CreateModel(
            name='MessageReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_earned', models.PositiveIntegerField(default=5)),
                ('reason', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PageView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('referrer', models.CharField(blank=True, max_length=255)),
                ('method', models.CharField(default='GET', max_length=10)),
                ('status_code', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Page View',
                'verbose_name_plural': 'Page Views',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PolicyAcceptance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.CharField(blank=True, max_length=300)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acceptances', to='location.policy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policy_acceptances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Acceptation de politique',
                'verbose_name_plural': 'Acceptations de politiques',
                'ordering': ['-accepted_at'],
            },
        ),
        migrations.CreateModel(
            name='Portefeuille',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solde', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('proprietaire', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='portefeuille', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProprietaireProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cin', models.CharField(blank=True, max_length=50, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Format : 99X99999 (2 chiffres, 1 lettre, 5 chiffres)', regex='^[0-9]{2}[A-Za-z]{1}[0-9]{5}$')], verbose_name='Numéro CIN')),
                ('address', models.TextField(verbose_name='Adresse complète')),
                ('assurance_document', models.FileField(blank=True, help_text='Format PDF, JPG ou PNG (max 10MB)', null=True, upload_to='documents/assurance/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])], verbose_name="Attestation d'assurance")),
                ('carte_grise_document', models.FileField(blank=True, help_text='Format PDF, JPG ou PNG (max 10MB)', null=True, upload_to='documents/carte_grise/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Carte grise')),
                ('documents_verified', models.BooleanField(default=False, verbose_name='Documents vérifiés')),
                ('verification_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de vérification')),
                ('admin_notes', models.TextField(blank=True, verbose_name='Notes administratives')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='proprietaire_profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil Propriétaire',
                'verbose_name_plural': 'Profils Propriétaires',
                'ordering': ['-created_at'],
                'permissions': [('can_verify_documents', 'Peut vérifier les documents'), ('can_manage_profiles', 'Peut gérer tous les profils')],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_debut', models.DateField(verbose_name='Date de début')),
                ('date_fin', models.DateField(verbose_name='Date de fin')),
                ('montant_paye', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant payé (XOF)')),
                ('commission_loueur', models.DecimalField(decimal_places=2, default=10.0, max_digits=5, verbose_name='Commission loueur (%)')),
                ('frais_service', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Frais de service (XOF)')),
                ('commission_proprietaire', models.DecimalField(decimal_places=2, default=10.0, max_digits=5, verbose_name='Commission propriétaire (%)')),
                ('caution_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Caution payée (XOF)')),
                ('caution_status', models.CharField(choices=[('pending', 'En attente'), ('held', 'Retenue'), ('refunded', 'Remboursée'), ('deducted', 'Retenue (déduite)')], default='pending', max_length=20)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('points_attribues', models.BooleanField(default=False, verbose_name='Points de fidélité attribués')),
                ('statut', models.CharField(choices=[('attente_paiement', 'En attente de paiement'), ('confirme', 'Confirmé'), ('annule', 'Annulé'), ('termine', 'Terminé')], default='attente', max_length=20)),
                ('avec_livraison', models.BooleanField(default=False)),
                ('adresse_livraison', models.TextField(blank=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations_client', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Réservation',
                'verbose_name_plural': 'Réservations',
                'ordering': ['-date_creation'],
                'permissions': [('can_manage_reservations', 'Peut gérer toutes les réservations'), ('can_view_reservation_stats', 'Peut voir les statistiques de réservation')],
            },
        ),
        migrations.CreateModel(
            name='Paiement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('methode', models.CharField(choices=[('ORANGE', 'Orange Money'), ('WAVE', 'Wave'), ('PAYPAL', 'PayPal'), ('CARTE', 'Carte de crédit'), ('PORTEFEUILLE', 'Portefeuille virtuel'), ('STRIPE', 'Stripe'), ('MOBILE_MONEY', 'Mobile Money International')], max_length=20, verbose_name='Méthode de paiement')),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant initial')),
                ('devise_origine', models.CharField(choices=[('XOF', 'Franc CFA (XOF)'), ('EUR', 'Euro (EUR)'), ('USD', 'Dollar US (USD)'), ('GBP', 'Livre Sterling (GBP)'), ('NGN', 'Naira Nigérian (NGN)'), ('GHS', 'Cedi Ghanéen (GHS)')], default='XOF', max_length=3, verbose_name="Devise d'origine")),
                ('taux_conversion', models.DecimalField(decimal_places=6, default=1.0, max_digits=12, verbose_name='Taux de conversion')),
                ('montant_converti', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Montant en XOF')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='ID Transaction')),
                ('reference', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Référence interne')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('REUSSI', 'Réussi'), ('ECHOUE', 'Échoué'), ('REMBOURSE', 'Remboursé'), ('EN_CONTROLE', 'En contrôle antifraude')], default='EN_ATTENTE', max_length=20, verbose_name='Statut')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('date_validation', models.DateTimeField(blank=True, null=True, verbose_name='Date de validation')),
                ('reponse_api', models.JSONField(blank=True, null=True, verbose_name='Réponse API')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='Métadonnées supplémentaires')),
                ('tentative_fraude', models.BooleanField(default=False, verbose_name='Tentative de fraude détectée')),
                ('ip_client', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP du client')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paiements', to='location.reservation')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-date_creation'],
                'permissions': [('refund_payment', 'Peut rembourser un paiement'), ('view_fraud', 'Peut voir les paiements suspects')],
            },
        ),
        migrations.CreateModel(
            name='Litige',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motif', models.TextField(verbose_name='Motif du litige')),
                ('statut', models.CharField(choices=[('ouvert', 'Ouvert'), ('en_cours', 'En cours'), ('resolu', 'Résolu'), ('rejete', 'Rejeté')], default='ouvert', max_length=10, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('resolution', models.TextField(blank=True, verbose_name='Détails de résolution')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='litiges_crees', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='litiges', to='location.reservation')),
            ],
            options={
                'verbose_name': 'Litige',
                'verbose_name_plural': 'Litiges',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EvaluationLoueur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Note')),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('evaluateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations_donnees', to=settings.AUTH_USER_MODEL)),
                ('evalue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations_recues', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations_loueur', to='location.reservation')),
            ],
            options={
                'verbose_name': 'Évaluation de loueur',
                'verbose_name_plural': 'Évaluations de loueurs',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='DrivingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('vehicle_model', models.CharField(max_length=100)),
                ('distance_covered', models.PositiveIntegerField(help_text='En kilomètres')),
                ('notes', models.TextField(blank=True)),
                ('loueur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='driving_history', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='location.reservation')),
            ],
            options={
                'verbose_name': 'Historique de conduite',
                'verbose_name_plural': 'Historiques de conduite',
            },
        ),
        migrations.CreateModel(
            name='DeliveryRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_address', models.TextField(verbose_name='Adresse de livraison')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('ACCEPTED', 'Acceptée'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée'), ('FAILED', 'Échouée')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('requested_date', models.DateTimeField(verbose_name='Date demandée')),
                ('completed_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de complétion')),
                ('tracking_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro de suivi')),
                ('notes', models.TextField(blank=True, verbose_name='Notes internes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('delivery_option', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='location.deliveryoption', verbose_name='Option de livraison')),
                ('driver', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Drivers'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Chauffeur assigné')),
                ('reservation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery', to='location.reservation', verbose_name='Réservation associée')),
            ],
            options={
                'verbose_name': 'Demande de livraison',
                'verbose_name_plural': 'Demandes de livraison',
                'ordering': ['-requested_date'],
                'permissions': [('can_track_delivery', 'Peut suivre les livraisons'), ('can_assign_driver', 'Peut assigner un chauffeur')],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la récompense')),
                ('reward_type', models.CharField(choices=[('DISCOUNT', 'Code de réduction'), ('CASHBACK', 'Cashback'), ('GIFT', 'Cadeau'), ('LOYALTY', 'Points de fidélité')], default='LOYALTY', max_length=20, verbose_name='Type de récompense')),
                ('value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Valeur')),
                ('description', models.TextField(verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='rewards/', verbose_name='Image')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('min_points_required', models.PositiveIntegerField(default=0, verbose_name='Points minimum requis')),
                ('stock_quantity', models.PositiveIntegerField(default=1, verbose_name='Quantité disponible')),
            ],
            options={
                'verbose_name': 'Récompense',
                'verbose_name_plural': 'Récompenses',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['reward_type'], name='location_re_reward__9d9cd6_idx'), models.Index(fields=['is_active'], name='location_re_is_acti_86ed99_idx')],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('type_transaction', models.CharField(choices=[('depot', 'Dépôt'), ('retrait', 'Retrait'), ('virement', 'Virement'), ('paiement', 'Paiement reçu')], max_length=20)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('valide', 'Validé'), ('rejete', 'Rejeté'), ('annule', 'Annulé')], default='en_attente', max_length=20)),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('motif_rejet', models.TextField(blank=True)),
                ('date_traitement', models.DateTimeField(blank=True, null=True)),
                ('portefeuille', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='location.portefeuille')),
                ('traite_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'permissions': [('valider_transaction', 'Peut valider les transactions')],
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claimed_at', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('code', models.CharField(blank=True, max_length=50, unique=True)),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_rewards', to='location.reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Récompense utilisateur',
                'verbose_name_plural': 'Récompenses utilisateurs',
                'ordering': ['-claimed_at'],
            },
        ),
        migrations.CreateModel(
            name='Voiture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marque', models.CharField(max_length=100, verbose_name='Marque')),
                ('modele', models.CharField(max_length=100, verbose_name='Modèle')),
                ('annee', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1990)], verbose_name='Année')),
                ('type_vehicule', models.CharField(choices=[('berline', 'Berline'), ('suv', 'SUV/4x4'), ('citadine', 'Citadine'), ('break', 'Break'), ('monospace', 'Monospace'), ('cabriolet', 'Cabriolet'), ('utilitaire', 'Utilitaire'), ('sport', 'Voiture de sport')], max_length=20, verbose_name='Type de véhicule')),
                ('transmission', models.CharField(choices=[('A', 'Automatique'), ('M', 'Manuelle')], max_length=1, verbose_name='Transmission')),
                ('carburant', models.CharField(choices=[('essence', 'Essence'), ('diesel', 'Diesel'), ('hybride', 'Hybride'), ('electrique', 'Électrique'), ('gpl', 'GPL')], max_length=20, verbose_name='Carburant')),
                ('caution_amount', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Montant de la caution (XOF)')),
                ('caution_required', models.BooleanField(default=False, verbose_name='Caution requise')),
                ('kilometrage', models.PositiveIntegerField(verbose_name='Kilométrage (km)')),
                ('nb_places', models.PositiveSmallIntegerField(verbose_name='Nombre de places')),
                ('nb_portes', models.PositiveSmallIntegerField(verbose_name='Nombre de portes')),
                ('climatisation', models.BooleanField(default=True, verbose_name='Climatisation')),
                ('gps', models.BooleanField(default=False, verbose_name='GPS')),
                ('siege_bebe', models.BooleanField(default=False, verbose_name='Siège bébé')),
                ('bluetooth', models.BooleanField(default=True, verbose_name='Bluetooth')),
                ('disponible', models.BooleanField(default=True, verbose_name='Disponible')),
                ('prix_jour', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1000)], verbose_name='Prix journalier (XOF)')),
                ('avec_chauffeur', models.BooleanField(default=False, verbose_name='Avec chauffeur')),
                ('prix_chauffeur', models.PositiveIntegerField(blank=True, null=True, verbose_name='Prix chauffeur/jour (XOF)')),
                ('ville', models.CharField(max_length=100, verbose_name='Ville')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='voitures/', verbose_name='Photo principale')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('proprietaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voitures', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Véhicule',
                'verbose_name_plural': 'Véhicules',
                'ordering': ['-date_creation'],
                'permissions': [('can_manage_cars', 'Peut gérer tous les véhicules'), ('can_approve_cars', 'Peut approuver les nouveaux véhicules')],
            },
        ),
        migrations.AddField(
            model_name='reservation',
            name='voiture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='location.voiture'),
        ),
        migrations.CreateModel(
            name='Favoris',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout")),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoris_relation', to=settings.AUTH_USER_MODEL)),
                ('voiture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favoris_voiture', to='location.voiture')),
            ],
            options={
                'verbose_name': 'Favori',
                'verbose_name_plural': 'Favoris',
                'ordering': ['-date_ajout'],
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Note')),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='location.reservation')),
                ('voiture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='location.voiture')),
            ],
            options={
                'verbose_name': 'Évaluation',
                'verbose_name_plural': 'Évaluations',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='VoiturePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='voitures/photos/', verbose_name='Photo supplémentaire')),
                ('date_ajout', models.DateTimeField(auto_now_add=True)),
                ('est_principale', models.BooleanField(default=False, verbose_name='Photo principale')),
                ('voiture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='location.voiture')),
            ],
            options={
                'verbose_name': 'Photo de voiture',
                'verbose_name_plural': 'Photos de voiture',
                'ordering': ['-est_principale', 'date_ajout'],
            },
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['updated_at'], name='location_co_updated_3c814e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='conversationarchive',
            unique_together={('user', 'conversation')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['timestamp'], name='location_me_timesta_fcf8a1_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['read'], name='location_me_read_f9b929_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['conversation', 'timestamp'], name='location_me_convers_1e794b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='policyacceptance',
            unique_together={('user', 'policy')},
        ),
        migrations.AddIndex(
            model_name='paiement',
            index=models.Index(fields=['transaction_id'], name='location_pa_transac_b83407_idx'),
        ),
        migrations.AddIndex(
            model_name='paiement',
            index=models.Index(fields=['statut'], name='location_pa_statut_4708d4_idx'),
        ),
        migrations.AddIndex(
            model_name='paiement',
            index=models.Index(fields=['methode'], name='location_pa_methode_645d2a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='evaluationloueur',
            unique_together={('reservation', 'evaluateur')},
        ),
        migrations.AlterUniqueTogether(
            name='userreward',
            unique_together={('user', 'reward')},
        ),
        migrations.AddIndex(
            model_name='voiture',
            index=models.Index(fields=['ville'], name='location_vo_ville_ee6512_idx'),
        ),
        migrations.AddIndex(
            model_name='voiture',
            index=models.Index(fields=['prix_jour'], name='location_vo_prix_jo_8572d3_idx'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.UniqueConstraint(condition=models.Q(('statut__in', ['attente', 'confirme'])), fields=('voiture', 'date_debut', 'date_fin'), name='reservation_unique'),
        ),
        migrations.AlterUniqueTogether(
            name='favoris',
            unique_together={('utilisateur', 'voiture')},
        ),
        migrations.AlterUniqueTogether(
            name='evaluation',
            unique_together={('voiture', 'client', 'reservation')},
        ),
    ]
